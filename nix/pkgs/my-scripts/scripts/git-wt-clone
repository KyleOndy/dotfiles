#!/usr/bin/env bash
set -Eeuo pipefail

# Clone and setup a repo for use with git worktree workflow

get_default_branch() {
  local repo_url=$1
  # Assumptions abound!
  local head_commit
  local branches_on_head
  local branch_count
  local default_branch

  head_commit=$(git ls-remote "$repo_url" HEAD | cut -f1 | head -n1)
  branches_on_head=$(git ls-remote "$repo_url" | rg --fixed-strings "$head_commit" | rg 'refs/heads/' | cut -f2 | cut -d'/' -f3-)
  branch_count=$(wc -l <<< "$branches_on_head")

  default_branch="main"
  if [[ $branch_count -eq 0 ]]; then
    echo "Error: Can't determine default branch for $repo_url" >&2
    exit 1
  elif [[ $branch_count -eq 1 ]]; then
    default_branch="$branches_on_head"
  else
    if echo "$branches_on_head" | grep -q "main"; then
      default_branch="main"
    elif echo "$branches_on_head" | grep -q "master"; then
      default_branch="master"
    else
      # Use first branch found
      default_branch=$(head -n1 <<< "$branches_on_head")
    fi
  fi

  echo "$default_branch"
}

# Show help text
if [[ $# -eq 0 ]]; then
  cat << 'EOF'
usage: git wt-clone <url> [name]

Clone a repository and set it up for git worktree workflow.

Creates a directory with:
  .bare/              - Bare repository
  .git                - Points to .bare
  <default-branch>/   - Initial worktree for default branch

Arguments:
  url   - Git repository URL to clone
  name  - Directory name (optional, defaults to repository name)

Examples:
  git wt-clone https://github.com/user/repo
    → Creates ./repo/ with main/ or master/ worktree

  git wt-clone https://github.com/user/repo my-project
    → Creates ./my-project/ with main/ or master/ worktree

After cloning, use git wt-feature-branch to create feature worktrees.
EOF
  exit 0
fi

readonly url=$1
readonly basename=${url##*/}
readonly name=${2:-${basename%.*}}

# Validate inputs
if [[ -z "$url" ]]; then
  echo "Error: Repository URL required" >&2
  echo "Usage: git wt-clone <url> [name]" >&2
  exit 1
fi

if [[ -e "$name" ]]; then
  echo "Error: Directory '$name' already exists" >&2
  exit 1
fi

# Detect default branch
echo "Detecting default branch..."
default_branch=$(get_default_branch "$url")
readonly default_branch
echo "Default branch: $default_branch"

# Create directory structure
mkdir "$name"
cd "$name"

# Clone as bare repository
echo ""
echo "Cloning repository..."
git clone --bare "$url" .bare

# Set up git directory pointer
echo "gitdir: ./.bare" > .git

# Configure remote fetch
git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"

# Fetch remote branches to populate remote tracking references
git fetch origin

# Create initial worktree for default branch
echo ""
echo "Creating worktree for '$default_branch'..."
git worktree add --no-checkout "$default_branch" "$default_branch"

# Set up git-crypt for new worktree if configured
if git config --get filter.git-crypt.smudge &>/dev/null; then
  echo "Setting up git-crypt..."

  # Get the worktree's git directory
  worktree_git_dir=$(git -C "$default_branch" rev-parse --git-dir)

  # Create git-crypt keys directory
  mkdir -p "$worktree_git_dir/git-crypt/keys"

  # Decrypt the symmetric key from the repo using GPG
  # Try each .gpg file (in case multiple collaborators) and use the first successful decryption
  for gpg_key in .git-crypt/keys/default/0/*.gpg; do
    if [ -f "$gpg_key" ]; then
      if gpg --decrypt --quiet "$gpg_key" > "$worktree_git_dir/git-crypt/keys/default" 2>/dev/null; then
        break
      fi
    fi
  done
fi

# Checkout files after git-crypt is unlocked
echo "Checking out files..."
(cd "$default_branch" && git checkout "$default_branch")

# Set up tracking for default branch
cd "$default_branch"
git branch -u "origin/${default_branch}" "$default_branch"

# Success summary
echo ""
echo "✓ Repository cloned and configured for worktree workflow"
echo "✓ Directory: $name/"
echo "✓ Initial worktree: $name/$default_branch/"
echo ""
echo "To start working:"
echo "  cd $name/$default_branch"
echo ""
echo "To create feature worktrees:"
echo "  git wt-feature-branch <name>              # Home mode"
echo "  git wt-feature-branch <ticket> <name>     # Work mode"
