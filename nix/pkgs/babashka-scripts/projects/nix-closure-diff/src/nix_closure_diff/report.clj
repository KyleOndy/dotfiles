(ns nix-closure-diff.report
  "Report generation for nix closure comparison"
  (:require
    [cheshire.core :as json]
    [clojure.string :as str]))


(defn format-timestamp
  "Format current timestamp for report"
  []
  (.format (java.time.LocalDateTime/now)
           (java.time.format.DateTimeFormatter/ofPattern "yyyy-MM-dd HH:mm:ss")))


(defn format-package-list
  "Format a list of packages for markdown display"
  [packages title]
  (if (empty? packages)
    ""
    (str "### " title " (" (count packages) " packages)\n\n"
         (str/join "\n" (map #(str "- `" (:name %) "` " (:version %)) packages))
         "\n\n")))


(defn format-version-changes
  "Format version changes for markdown display"
  [version-changes]
  (if (empty? version-changes)
    ""
    (str "### Version Changes (" (count version-changes) " packages)\n\n"
         (str/join "\n"
                   (map #(str "- `" (:name %) "`: "
                              (str/join ", " (:old-versions %))
                              " ‚Üí "
                              (str/join ", " (:new-versions %)))
                        version-changes))
         "\n\n")))


(defn format-system-comparison
  "Format comparison results for a single system"
  [system comparison-data]
  (if (:error comparison-data)
    (str "## " (str system) "\n\n"
         "‚ùå **Error**: " (:error comparison-data) "\n"
         (when (:details comparison-data)
           (str "\nDetails: " (:details comparison-data)))
         "\n\n")
    (let [{:keys [added removed version-changes stats]} comparison-data]
      (str "## " (str system) "\n\n"
           "üìä **Statistics:**\n"
           "- Old total: " (:total-old stats) " packages\n"
           "- New total: " (:total-new stats) " packages\n"
           "- Added: " (:added-count stats) " packages\n"
           "- Removed: " (:removed-count stats) " packages\n"
           "- Version changes: " (:version-changes-count stats) " packages\n\n"
           (format-package-list added "Added Packages")
           (format-package-list removed "Removed Packages")
           (format-version-changes version-changes)))))


(defn generate-markdown-report
  "Generate a markdown report from comparison data"
  [old-commit new-commit comparison-data summary-stats]
  (let [timestamp (format-timestamp)]
    (str "# Nix Closure Comparison Report\n\n"
         "**Generated:** " timestamp "\n"
         "**Old commit:** `" old-commit "`\n"
         "**New commit:** `" new-commit "`\n\n"

         "## Summary\n\n"
         "üìà **Overall Statistics:**\n"
         "- Total systems analyzed: " (:total-systems summary-stats) "\n"
         "- Successful builds: " (:successful-systems summary-stats) "\n"
         "- Systems with errors: " (:systems-with-errors summary-stats) "\n"
         "- Total packages added: " (:total-packages-added summary-stats) "\n"
         "- Total packages removed: " (:total-packages-removed summary-stats) "\n"
         "- Total version changes: " (:total-version-changes summary-stats) "\n\n"

         "---\n\n"

         (str/join "\n"
                   (map #(format-system-comparison (key %) (val %))
                        comparison-data))

         "---\n\n"
         "*Report generated by nix-closure-diff babashka script*\n")))


(defn generate-json-report
  "Generate a JSON report from comparison data"
  [old-commit new-commit comparison-data summary-stats]
  (json/generate-string
    {:metadata {:timestamp (format-timestamp)
                :old-commit old-commit
                :new-commit new-commit
                :generator "nix-closure-diff"}
     :summary summary-stats
     :systems comparison-data}
    {:pretty true}))


(defn generate-report
  "Generate a report in the specified format"
  [format old-commit new-commit comparison-data summary-stats]
  (case format
    "markdown" (generate-markdown-report old-commit new-commit comparison-data summary-stats)
    "json" (generate-json-report old-commit new-commit comparison-data summary-stats)
    (throw (ex-info (str "Unsupported format: " format) {:format format}))))


(defn write-report
  "Write the report to a file"
  [content output-file]
  (spit output-file content)
  (println (str "Report written to: " output-file)))
